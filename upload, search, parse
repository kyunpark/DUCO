
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

//hbase包
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.HTablePool;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.filter.Filter;
import org.apache.hadoop.hbase.filter.FilterList;
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;
import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
import org.apache.hadoop.hbase.io.*;
import org.apache.hadoop.hbase.util.Bytes;


//csv包
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.beanutils.BeanUtils;
import java.io.FileWriter;
import java.io.FileReader;

class saveCsvToHbase{
	private static Configuration conf =null;
	/**
	 * initialization
	*/
	static {
     conf = HBaseConfiguration.create();
     conf.set("hbase.zookeeper.property.clientPort", "2181");
	}
	/**
	 * create table
	*/
	public static void createTable(String tablename, String[] cfs) throws IOException
	{
	    HBaseAdmin admin =new HBaseAdmin(conf);
	    if (admin.tableExists(tablename)) 
	    {
	        System.out.println("table"+tablename+"existed！");
	    }
	    else 
	    {
	        HTableDescriptor tableDesc =new HTableDescriptor(tablename);
	        	for (int i =0; i < cfs.length; i++) 
	        	{
	        		tableDesc.addFamily(new HColumnDescriptor(cfs[i]));
	        	}
	        	admin.createTable(tableDesc);
	        	System.out.println("table"+tablename+"created successfully！");
	    }
	}
	/**
	 * insert 1 row
	*/
	public  void writeRow(String tablename, String rowname,String[] colname,String[] val) 
	{
	    try 
	    {
	        HTable table =new HTable(conf, tablename);
	        Put put =new Put(Bytes.toBytes(rowname));
	        String str=new String();
	        for (int j =0; j < colname.length; j++) 
	        {
	        	put.add(colname[j].getBytes(),null,val[j].getBytes());
	            table.put(put);
	            str+="["+val[j]+"]";

	        }
	        System.out.println("write in hbase-->"+str);
	        
	    } 
	    catch (IOException e)
	    {
	        e.printStackTrace();
	    }
	}
	public  void  readCSV_s(String filepath,int row,String[] coldata){
        try{           
	          BufferedReader reader = new BufferedReader(new FileReader(filepath));         
	          String line = null;
	          int index=0;
	          int ii;
	          while((line=reader.readLine())!=null)
	          {
	        	  if(index==row-1)
	        	  {
	        		  
					  String item[] = line.split(",");

					  String []stra = line.split("\"");
					  int i = 0;
					  String []temp;
					  List<String> result = new ArrayList<String>();
					  for(String s : stra){
						   
						   if(i % 2 == 0) 
						   {
							    temp = s.split(",");
							    if(temp.length > 0)
							    {
							    	if(i<2)
							    	{
									     for(String ts : temp)
									      result.add(ts);
							        }
							    	else
							    	{
							    		int its=0;
							    		for(String ts : temp)
							    		{
							    			if(its>0)
							    			    result.add(ts);
							    			its++;
										}
							    	}
							    }
						   }
						   else 
						   {
							   result.add(s);
						   }
						   i++;
					  }
					 
					   ii=0;
					   for(String s : result){
						   coldata[ii]=s;
						   ii++;
					   }

				    	   
				   }
		           index++;
	           }      
         	} 
        	catch (Exception e) 
        	{
        		e.printStackTrace();
           }
  }
	void save(String tablename,String filepath) throws IOException
	{
		
		BufferedReader reader = new BufferedReader(new FileReader(filepath));     
	    // reader.readLine();           
	     String line = null;


	     int length1=20;
	     if((line=reader.readLine())!=null){
			  String item[] = line.split(","); 	   
			  length1=item.length;
			  System.out.println(length1); 
	     }
		
		String[] colname = new String[length1]; 
		readCSV_s(filepath,1,colname);
		 int ii=0;
		  for(ii=0;ii<colname.length;ii++){
	   	   //System.out.println(colname[ii]);  
	   	   //coldata[ii]=item[ii];
	      }
		  //String tablename = "swap5";
		  createTable(tablename,colname);
		  String[] s1 = new String[length1];
		 
		  reader = new BufferedReader(new FileReader(filepath));     
	     line = null;
	     int index=0;
	    
	     boolean writeflag=true;
	     if(writeflag==true)
	     {
	    	 //while((line=reader.readLine())!=null && index<4)
	    	 while((line=reader.readLine())!=null ) 	     	 
		     {
		    	 index++;
		    	 if(index>1)
		    	 {
		    		 readCSV_s(filepath,index,s1);
		    		// System.out.println;
		    		 System.out.println("插入第"+index+"行数据进入hbase数据库");  
		    		 writeRow(tablename,String.valueOf(index),colname,s1); 
		    	 }
		    	 
		     }
	     }
	}
	
}
class queryHbase{
	private static Configuration conf =null;
	/**
	 * 
	*/
	static {
     conf = HBaseConfiguration.create();
     conf.set("hbase.zookeeper.property.clientPort", "2181");
	}
	
	/** 
	 * 
	 */  
	public  void QueryByOneColname(String tablename,String colname,String val) {  
	
	    try {  
	        System.out.println("");
	        HTable table =new HTable(conf, tablename);
	        Filter filter = new SingleColumnValueFilter(colname.getBytes(), null, CompareOp.EQUAL,val.getBytes()); //   
	        Scan s = new Scan();  
	        s.setFilter(filter);  
	        //System.out.println("start search enquiry");
	        ResultScanner rs = table.getScanner(s);  
	        int  rcount=0;
	        String outcolname = new String();
	        List<String> arr=new ArrayList<String>();
	        String tmpstr = new String();
			//arr.add("Trade ID,2635771");
			//arr.add("Trade Date,10/06/2014");
	        for (Result r : rs) { 
	        	rcount++;
	            for (KeyValue keyValue : r.raw())
	            {  
	            	if(rcount==1){outcolname+=" [ "+new String(keyValue.getFamily())+" ] ";}
	            	tmpstr+=" <"+new String(keyValue.getValue())+"> ";
	            }  
	            arr.add(tmpstr);
	            tmpstr="";
	        } 
	        System.out.println("the search outcome[ '"+colname+"' = '"+val+"' ] of record, total "+rcount+"as follow：");
	        System.out.println(outcolname);
	        for (String v:arr)
	        {
	        	System.out.println(v);
	        }
	        
	    } catch (Exception e) {  
	        e.printStackTrace();  
	    }  
	
	}

	
}


public class HBaseBasic {
	 
	 
	 public static void main(String [] args) throws IOException{
		
	    saveCsvToHbase sch=new saveCsvToHbase();
		
		sch.save("swap1","C:\\Users\\wenhao shen\\Desktop\\project\\swap_demo_data_13_scenario_01\\swap_demo_data_internal_13.csv");
		
		 
		queryHbase qh=new queryHbase();
		//qh.QueryByOneColname("swap2","Trade ID","2635771");
		qh.QueryByOneColname("swap1","Trade Date","01/10/2014");
		
	 }
}
