package generating;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;


public class WriteData2Csv {
	public SimpleDateFormat sdf = new SimpleDateFormat();
	// run m rows of data 
	public File generateData(String outPutPath, String filename, int m,String typename) {
		File csvFile = null;
		BufferedWriter csvFileOutputStream = null;
		try {
			csvFile = new File(outPutPath + filename + ".csv");
			File parent = csvFile.getParentFile();
			if (parent != null && !parent.exists()) {
				parent.mkdirs();
			}
			csvFile.createNewFile();
			
            // generating title and order
			ColumnTitleGenerator ctg=new ColumnTitleGenerator();
			String[] titleArray = new String[50];  
			int [] titleOrder = new int[50];
			int [] numberOfColumn = new int[1]; 
			ctg.generateColumnValueArray(typename, titleArray, titleOrder, numberOfColumn);

			csvFileOutputStream = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(csvFile), "GB2312"), 1024);

			 System.out.println(numberOfColumn[0]);
			 String tos = new String();
			 tos="";
			 String row = new String();
			for (int i=0;i<numberOfColumn[0];i++) {
				
				csvFileOutputStream.write(titleArray[i]);
				row += "\"" + titleArray[i] + "\"";
				if(typename.equals("swap")==true)
                tos += titleOrder[i]+",";
				else if(typename.equals("future")==true)
					tos += titleOrder[i]-12+",";
				if (i<numberOfColumn[0]) {
					csvFileOutputStream.write(",");
				}
			}
			System.out.println(tos);
			System.out.println("has generated 1th row data：" + row);
			

			// generating&writing
			float rowNumber = 1;
			int ii = 0;
			int[] td_1 = new int[m];

			TradeIDColumnGenerator tg=new TradeIDColumnGenerator(); 
			td_1 = tg.generateColumnValue(m, m);
			String fd = new String();
		
			// use pre write class to generate data
			TradeDateColumnGenerator td=new TradeDateColumnGenerator(); 

			PaymentFrequencyColumnGenerator pf=new PaymentFrequencyColumnGenerator(); 

			NotionalColumnGenerator noti=new NotionalColumnGenerator();
	
			CurrencyColumnGenerator curr=new CurrencyColumnGenerator();

			BuyorSellColumnGenerator bos=new BuyorSellColumnGenerator();
			EffectiveDateColumnGenerator eff = new EffectiveDateColumnGenerator();
			TerminationDateColumnGenerator ter=new TerminationDateColumnGenerator();
			FixedRateColumnGenerator fix=new FixedRateColumnGenerator();
			FloatingRateColumnGenerator flo = new FloatingRateColumnGenerator();
			SellerAndBuyerPartiesColumnGenerator sabp= new SellerAndBuyerPartiesColumnGenerator();
			
			/*"trade date", "delivery date",
			"unit of trading", "contract price", "contract size",
			"currency", "interest rate", "buy/sell", "trade id" */
			
			DeliveryDateColumnGenerator del = new DeliveryDateColumnGenerator();
			UnitOfTradingColumnGenerator uni = new UnitOfTradingColumnGenerator();
			ContractPriceColumnGenerator con = new ContractPriceColumnGenerator();
			ContractSizeColumnGenerator siz= new ContractSizeColumnGenerator();
			InterestRateColumnGenerator inte = new InterestRateColumnGenerator();
			
			
			for (ii = 0; ii < m; ii++) {
				csvFileOutputStream.newLine();
				row = "";
				
				Calendar [] benchTime = new Calendar[1];
				benchTime[0]=Calendar.getInstance();
				
				boolean tradeDateGenerateflag=false;
				String tradeDate = new String();
				for (int i=0;i<numberOfColumn[0];i++) 
				{
					fd="fd";
					benchTime[0]=Calendar.getInstance();
					
/*					"Trade ID", "Trade date", "Effective date",
					"Termination date", "Payment frequency", "Notional",
					"Currency", "Fixed rate", "Floating rate",
					"Seller and buyer parties", "Buy or sell", "Contract price"
					
					"trade date", "delivery date",
					"unit of trading", "contract price", "contract size",
					"currency", "interest rate", "buy/sell", "trade id" */
					switch (titleOrder[i]) {
					case (1): // trade id 
						fd=String.valueOf(td_1[ii]);
						break;
					case (2): // trade date
						if(tradeDateGenerateflag==false){
							fd=td.generateColumnValue(benchTime);
							tradeDateGenerateflag=true;
						}
						else
							fd = tradeDate;
					    
						break;
					case (3): // effective date
						if(tradeDateGenerateflag)
						    fd=eff.generateColumnValue(benchTime);
						else{
							tradeDate=td.generateColumnValue(benchTime);
					        tradeDateGenerateflag=true;  
					        fd=eff.generateColumnValue(benchTime);
						}
						//fd = eff.generateColumnValue(benchTime);
						break;
					case (4): // Termination date
						if(tradeDateGenerateflag)
						    fd=ter.generateColumnValue(benchTime);
						else{
							tradeDate=td.generateColumnValue(benchTime);
					        tradeDateGenerateflag=true;  
					        fd=ter.generateColumnValue(benchTime);
						}
						//fd = ter.generateColumnValue(benchTime);
						break;
					case (5): // Payment frequency
						fd = pf.generateColumnValue();
						break;
					case (6): // Notional
						fd = noti.generateColumnValue();
						break;
					case (7): // Currency
						fd = curr.generateColumnValue();
						break;
					case (8): // Fixed rate
						fd = fix.generateColumnValue();
						break;
					case (9): // Floating rate
						fd = flo.generateColumnValue();
						break;
					case (10): // Seller and buyer parties
						fd = sabp.generateColumnValue();
						break;
					case (11): // Buy or sell
						fd = bos.generateColumnValue();
						break;
					case (12): // Contract price
						fd = con.generateColumnValue();
						break;

					case (13): // trade date
						if(tradeDateGenerateflag==false){
							fd=td.generateColumnValue(benchTime);
							tradeDateGenerateflag=true;
						}
						else
							fd = tradeDate;
						break;
					case (14): // delivery date
						if(tradeDateGenerateflag)
						    fd=del.generateColumnValue(benchTime);
						else{
							tradeDate=td.generateColumnValue(benchTime);
					        tradeDateGenerateflag=true;  
					        fd=del.generateColumnValue(benchTime);
						}
						break;
					case (15): // unit of trading
						fd = uni.generateColumnValue();
						break;
					case (16): // contract price 
						fd = con.generateColumnValue();
						break;
					case (17): // contract size
						fd = siz.generateColumnValue();
						break;
					case (18): // currency 
						fd = curr.generateColumnValue();
						break;
					case (19): // interest rate
						fd = inte.generateColumnValue();
						break;
					case (20): // buy/sell
						fd = bos.generateColumnValue();
						break;
					case (21): // trade id
						fd=String.valueOf(td_1[ii]);
						break;
					
					
					}
					
					if (fd.indexOf(",") == -1)
						csvFileOutputStream.write(fd);
					else
						csvFileOutputStream.write("\"" + fd + "\"");
					if (i<numberOfColumn[0]) {
						csvFileOutputStream.write(",");
					}
					row += "\"" + fd + "\"";
				}
				

				rowNumber = ii + 1;
				System.out.println("has generated " + (int) rowNumber + "th row data：" + row);
				
			}
			csvFileOutputStream.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				csvFileOutputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return csvFile;
	}
}
