import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

//hbase包
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.HTablePool;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.filter.Filter;
import org.apache.hadoop.hbase.filter.FilterList;
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;
import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
import org.apache.hadoop.hbase.io.*;
import org.apache.hadoop.hbase.util.Bytes;


//csv包
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.apache.commons.beanutils.BeanUtils;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

//hbase包
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.HTablePool;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.filter.Filter;
import org.apache.hadoop.hbase.filter.FilterList;
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;
import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
import org.apache.hadoop.hbase.io.*;
import org.apache.hadoop.hbase.util.Bytes;


//csv包
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.apache.commons.beanutils.BeanUtils;
import java.io.FileWriter;
import java.io.FileReader;

class OperateCSV
{
	private static SimpleDateFormat sdf = new SimpleDateFormat();
	
	public static File createCSVFile(List exportData, LinkedHashMap rowMapper,String outPutPath, String filename)
	{
        File csvFile = null;
        BufferedWriter csvFileOutputStream = null;
        try {
            csvFile = new File(outPutPath + filename + ".csv");
            File parent = csvFile.getParentFile();
            if (parent != null && !parent.exists())
			{
                parent.mkdirs();
            }
            csvFile.createNewFile();

            csvFileOutputStream = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFile), "GB2312"), 1024);
            for (Iterator propertyIterator = rowMapper.entrySet().iterator(); propertyIterator.hasNext();) 
            {
                java.util.Map.Entry propertyEntry = (java.util.Map.Entry) propertyIterator.next();
                csvFileOutputStream.write("\"" + propertyEntry.getValue().toString() + "\"");
                if (propertyIterator.hasNext())
                {
                    csvFileOutputStream.write(",");
                }
            }
            csvFileOutputStream.newLine();

            float r0=1;
            for (Iterator iterator = exportData.iterator(); iterator.hasNext();) 
            {  
                Object row = (Object)iterator.next();  
                System.out.println(r0+"-----"+row);
                for (Iterator propertyIterator = rowMapper.entrySet().iterator(); propertyIterator.hasNext();)
                {  
                    java.util.Map.Entry propertyEntry = (java.util.Map.Entry) propertyIterator.next();  
                    //System.out.println( BeanUtils.getProperty(row, propertyEntry.getKey().toString()));
                    //csvFileOutputStream.write("\"" +  propertyEntry.getValue().toString() + "\"");
                    csvFileOutputStream.write("\"" +  BeanUtils.getProperty(row, propertyEntry.getKey().toString()) + "\"");
                    
                    if(propertyIterator.hasNext())
                    {  
                       csvFileOutputStream.write(",");  
                    }  
               }  
               if(iterator.hasNext())
               {  
            	   csvFileOutputStream.newLine();    
            	   r0++;
               }  
           }  
           csvFileOutputStream.flush();  
        } 
        catch (Exception e)
        {  
           e.printStackTrace();  
        } 
        finally 
        {  
           try{  
                 csvFileOutputStream.close();  
              } 
           catch (IOException e)
             {  
                e.printStackTrace();
             }  
        }  
        return csvFile;
    }
	
	public File genarateData2CSV_m(String outPutPath, String filename,int m) 
	{
        File csvFile = null;
        BufferedWriter csvFileOutputStream = null;
        try 
		{
            csvFile = new File(outPutPath + filename + ".csv");
            // csvFile.getParentFile().mkdir();
            File parent = csvFile.getParentFile();
            if (parent != null && !parent.exists()) 
			{
                parent.mkdirs();
            }
            csvFile.createNewFile();

            csvFileOutputStream = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFile), "GB2312"), 1024);
            LinkedHashMap rowMapper = new LinkedHashMap();
            rowMapper.put("1", "Trade Id"); // trade id	trade date	termination date	payment frequency	notional	currency	risk free rate	buy or sell
            rowMapper.put("2", "Trade Date");
            rowMapper.put("3", "Termination Date");
            rowMapper.put("4", "Payment Frequency");
            rowMapper.put("5", "Notional");
            rowMapper.put("6", "Currency");
            rowMapper.put("7", "Risk Free Rate");
            rowMapper.put("8", "Buy or Sell");

            for (Iterator propertyIterator = rowMapper.entrySet().iterator(); propertyIterator.hasNext();) 
            {
                java.util.Map.Entry propertyEntry = (java.util.Map.Entry) propertyIterator.next();
                csvFileOutputStream.write("\"" + propertyEntry.getValue().toString() + "\"");
                if (propertyIterator.hasNext())
                {
                    csvFileOutputStream.write(",");
                }
            }
           
            float r0=1;
            int ii=0;
            int[] td_1 = new int[m];
			td_1=RandomNum(m,m);
			Calendar  now  =  Calendar.getInstance(); 
			String pattern = "dd/MM/yyyy";
			String fd=new String();
			Random r = new Random();
            for (ii=0;ii<m;ii++)         	
            {  
				csvFileOutputStream.newLine();
				String row = new String();

				//Trade ID
				csvFileOutputStream.write("\"" +  String.valueOf(  td_1[ii]  )+ "\"");csvFileOutputStream.write(","); 
				row+="\""+String.valueOf(  td_1[ii]  )+"\"";

				//Trade Date 
				now.set(2014, 1, 1);
				now.add(Calendar.DATE,(int)(Math.floor(Math.abs(365*3*r.nextFloat()))));
				now=getWorkDay(now);
				pattern = "dd/MM/yyyy";
				fd=getDateFormat( now, pattern );
				csvFileOutputStream.write("\"" + fd+ "\"");csvFileOutputStream.write(",");row+="\""+fd+"\"";

				// Termination Date
				now.add(Calendar.DATE,(int)(Math.floor(Math.abs(365*2+Math.abs(365*3*r.nextFloat())))));
				now=getWorkDay(now);
				pattern = "dd/MM/yyyy";
				fd=getDateFormat( now, pattern );
				csvFileOutputStream.write("\"" + fd+ "\"");csvFileOutputStream.write(","); row+="\""+fd+"\"";

				fd="";
				switch(Math.abs(r.nextInt()%4))
				{case 0:
					fd="1M";
				break;
				case 1:
					fd="3M";
				break;
				case 2:
					fd="6M";
				break;
				case 3:
					fd="1Y";
				break;
				}
				csvFileOutputStream.write("\"" + fd+ "\"");csvFileOutputStream.write(",");row+="\""+fd+"\""; 

				int iii=(int)(((int)Math.round(r.nextInt()/100000))*Math.pow(10, 5));
				fd=String.valueOf(iii);
				if(iii>0) fd="+"+fd;
				if(fd.length()>4)
					fd=Stringinsert(fd,",",fd.length()-4);
				if(fd.length()>9)
					fd=Stringinsert(fd,",",fd.length()-8);
				if(fd.length()>14)
					fd=Stringinsert(fd,",",fd.length()-13);	
				csvFileOutputStream.write("\"" + fd+ "\"");csvFileOutputStream.write(",");row+="\""+fd+"\""; 

				fd="";
				switch(Math.abs(r.nextInt()%3))
				{case 0:
					fd="USD";
				break;
				case 1:
					fd="GBP";
				break;
				case 2:
					fd="EUR";
				break;
				}
				csvFileOutputStream.write("\"" + fd+ "\"");csvFileOutputStream.write(",");row+="\""+fd+"\""; 

				float rfr=3+2*r.nextFloat();
				rfr = (float)Math.round(rfr*100)/100;
				fd=String.valueOf(rfr);
				csvFileOutputStream.write("\"" + fd+ "\"");csvFileOutputStream.write(","); row+="\""+fd+"\"";

				if(iii>0) fd="buy"; else fd="sell";
				csvFileOutputStream.write("\"" + fd+ "\"");row+="\""+fd+"\"";

				r0=ii+1;
				System.out.println("已生成第"+(int)r0+"行数据："+row);     
           }  
           csvFileOutputStream.flush();  
        } 
        catch (Exception e)
        {  
           e.printStackTrace();  
        } 
        finally 
        {  
           try{  
                 csvFileOutputStream.close();  
              } 
           catch (IOException e)
             {  
                 e.printStackTrace();
             }  
        }  
        return csvFile;
    }

	public static double[] bubbleSort(double[] a) {  
		double[] b=new double[a.length];
		for (int i = 0; i < a.length - 1; i++)
			b[i]=i+1;
		
        for (int i = 0; i < a.length - 1; i++) 
		{  
            for (int j = i + 1; j < a.length; j++) 
			{  
                if(a[i] > a[j])
				{  
                    double temp;  
                    temp = a[j];  
                    a[j] = a[i];  
                    a[i] = temp;  
                    
                    temp = b[j];  
                    b[j] = b[i];  
                    b[i] = temp;  
   
                }  
            }  
        }  
        return b;  
    } 
	

	 public static synchronized String getDateFormat( java.util.Calendar cal, String pattern )
	 {
		return getDateFormat( cal.getTime(), pattern );
	 }


	public static synchronized String getDateFormat( java.util.Date date, String pattern )
	{
		synchronized ( sdf )
		{
			String str = null;
			sdf.applyPattern( pattern );
			str = sdf.format( date );
			return str;
		}
	}
	 

	public static synchronized Calendar getWorkDay(java.util.Calendar gc )
	{
	tch ( gc.get( Calendar.DAY_OF_WEEK ) )
		{
			case ( Calendar.SUNDAY):
				gc.add( Calendar.DATE, 1 );
			break;
			case ( Calendar.SATURDAY    ):
				gc.add( Calendar.DATE, -1 );
			break;
		}
		//return gc.getTime();
		return gc;
	}
	

	public static String Stringinsert(String a,String b,int t)
	{     
		return a.substring(0,t)+b+a.substring(t+1,a.length());
	} 
	 
 
	static int[] RandomNum(int m,int n)
	{
		int[] v = new int[m];
		boolean[] b = new boolean[n];
		Random r = new Random();
		double beicheng = (Math.pow(10,9)-Math.pow(10,7))/m;
		do
		{
			int x = r.nextInt(n);
			if(!b[x])
			{
				v[--m]=(int) (Math.abs(x*beicheng)+(int)Math.pow(10, 7));
				b[x]=true;
			}
		}
		while(m>0);
		return v;
	}
}

public class HBaseBasic {
	
	
	 public static void main(String [] args) throws IOException
	 {
		 
/*	
	    saveCsvToHbase sch=new saveCsvToHbase();

		sch.save("swap1","D:\\");
		
		 
		queryHbase qh=new queryHbase();
		//qh.QueryByOneColname("swap2","Trade ID","2635771");
		qh.QueryByOneColname("swap1","Trade Date","01/10/2014");*/
		 
		OperateCSV oc = new OperateCSV();
		int m=5000000; 
		oc.genarateData2CSV_m("d:/",m+"_rows",m);
		     
		
	 }
